{"0": {
    "doc": "Otro acerca de",
    "title": "About",
    "content": " ",
    "url": "/dev-docs/_site/front-end/about/#about",
    "relUrl": "/front-end/about/#about"
  },"1": {
    "doc": "Otro acerca de",
    "title": "Table of contents",
    "content": ". | Values | Deliberate practice | Academic honesty | Grading | Access and accommodations | Extenuating circumstances | Inclusive community | . Administrative questions Pim Lustig cse143@uw.edu Prerequisites CSE 142 or equivalent Optional textbook Reges/Stepp, Building Java Programs (5th Edition) ",
    "url": "/dev-docs/_site/front-end/about/#table-of-contents",
    "relUrl": "/front-end/about/#table-of-contents"
  },"2": {
    "doc": "Otro acerca de",
    "title": "Values",
    "content": " ",
    "url": "/dev-docs/_site/front-end/about/#values",
    "relUrl": "/front-end/about/#values"
  },"3": {
    "doc": "Otro acerca de",
    "title": "Deliberate practice",
    "content": " ",
    "url": "/dev-docs/_site/front-end/about/#deliberate-practice",
    "relUrl": "/front-end/about/#deliberate-practice"
  },"4": {
    "doc": "Otro acerca de",
    "title": "Academic honesty",
    "content": " ",
    "url": "/dev-docs/_site/front-end/about/#academic-honesty",
    "relUrl": "/front-end/about/#academic-honesty"
  },"5": {
    "doc": "Otro acerca de",
    "title": "Grading",
    "content": " ",
    "url": "/dev-docs/_site/front-end/about/#grading",
    "relUrl": "/front-end/about/#grading"
  },"6": {
    "doc": "Otro acerca de",
    "title": "Access and accommodations",
    "content": "It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law. If you have already established accommodations with Disability Resources for Students (DRS), activate your accommodations via myDRS so we can discuss how they will be implemented in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), contact DRS directly to set up an Access Plan. DRS facilitates the interactive process that establishes reasonable accommodations. ",
    "url": "/dev-docs/_site/front-end/about/#access-and-accommodations",
    "relUrl": "/front-end/about/#access-and-accommodations"
  },"7": {
    "doc": "Otro acerca de",
    "title": "Extenuating circumstances",
    "content": "We recognize that our students come from varied backgrounds and can have widely-varying circumstances. If you have any unforeseen or extenuating circumstances that arise during the course, do not hesitate to contact the instructor by appointment, via email, or private post to discuss your situation. The sooner we are made aware, the more easily these situations can be resolved. Extenuating circumstances include work-school balance, familial responsibilities, religious observations, military duties, unexpected travel, or anything else beyond your control that may negatively impact your performance in the class. Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW’s policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form. ",
    "url": "/dev-docs/_site/front-end/about/#extenuating-circumstances",
    "relUrl": "/front-end/about/#extenuating-circumstances"
  },"8": {
    "doc": "Otro acerca de",
    "title": "Inclusive community",
    "content": "This course welcomes all students of all backgrounds. The computer science and computer engineering industries have significant lack of diversity. This is due to a lack of sufficient past efforts by the field toward even greater diversity, equity, and inclusion. The Allen School seeks to create a more diverse, inclusive, and equitable environment for our community and our field. You should expect and demand to be treated by your classmates and the course staff with respect. If any incident occurs that challenges this commitment to a supportive, diverse, inclusive, and equitable environment, please let the instructor know so the issue can be addressed. Should you feel uncomfortable bringing up an issue with the instructor directly, submit anonymous feedback or contact the Office of the Ombud. ",
    "url": "/dev-docs/_site/front-end/about/#inclusive-community",
    "relUrl": "/front-end/about/#inclusive-community"
  },"9": {
    "doc": "Otro acerca de",
    "title": "Otro acerca de",
    "content": " ",
    "url": "/dev-docs/_site/front-end/about/",
    "relUrl": "/front-end/about/"
  },"10": {
    "doc": "Acerca de",
    "title": "About",
    "content": " ",
    "url": "/dev-docs/_site/about/#about",
    "relUrl": "/about/#about"
  },"11": {
    "doc": "Acerca de",
    "title": "Table of contents",
    "content": ". | Values | Deliberate practice | Academic honesty | Grading | Access and accommodations | Extenuating circumstances | Inclusive community | . Administrative questions Pim Lustig cse143@uw.edu Prerequisites CSE 142 or equivalent Optional textbook Reges/Stepp, Building Java Programs (5th Edition) ",
    "url": "/dev-docs/_site/about/#table-of-contents",
    "relUrl": "/about/#table-of-contents"
  },"12": {
    "doc": "Acerca de",
    "title": "Values",
    "content": " ",
    "url": "/dev-docs/_site/about/#values",
    "relUrl": "/about/#values"
  },"13": {
    "doc": "Acerca de",
    "title": "Deliberate practice",
    "content": " ",
    "url": "/dev-docs/_site/about/#deliberate-practice",
    "relUrl": "/about/#deliberate-practice"
  },"14": {
    "doc": "Acerca de",
    "title": "Academic honesty",
    "content": " ",
    "url": "/dev-docs/_site/about/#academic-honesty",
    "relUrl": "/about/#academic-honesty"
  },"15": {
    "doc": "Acerca de",
    "title": "Grading",
    "content": " ",
    "url": "/dev-docs/_site/about/#grading",
    "relUrl": "/about/#grading"
  },"16": {
    "doc": "Acerca de",
    "title": "Access and accommodations",
    "content": "It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law. If you have already established accommodations with Disability Resources for Students (DRS), activate your accommodations via myDRS so we can discuss how they will be implemented in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), contact DRS directly to set up an Access Plan. DRS facilitates the interactive process that establishes reasonable accommodations. ",
    "url": "/dev-docs/_site/about/#access-and-accommodations",
    "relUrl": "/about/#access-and-accommodations"
  },"17": {
    "doc": "Acerca de",
    "title": "Extenuating circumstances",
    "content": "We recognize that our students come from varied backgrounds and can have widely-varying circumstances. If you have any unforeseen or extenuating circumstances that arise during the course, do not hesitate to contact the instructor by appointment, via email, or private post to discuss your situation. The sooner we are made aware, the more easily these situations can be resolved. Extenuating circumstances include work-school balance, familial responsibilities, religious observations, military duties, unexpected travel, or anything else beyond your control that may negatively impact your performance in the class. Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW’s policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form. ",
    "url": "/dev-docs/_site/about/#extenuating-circumstances",
    "relUrl": "/about/#extenuating-circumstances"
  },"18": {
    "doc": "Acerca de",
    "title": "Inclusive community",
    "content": "This course welcomes all students of all backgrounds. The computer science and computer engineering industries have significant lack of diversity. This is due to a lack of sufficient past efforts by the field toward even greater diversity, equity, and inclusion. The Allen School seeks to create a more diverse, inclusive, and equitable environment for our community and our field. You should expect and demand to be treated by your classmates and the course staff with respect. If any incident occurs that challenges this commitment to a supportive, diverse, inclusive, and equitable environment, please let the instructor know so the issue can be addressed. Should you feel uncomfortable bringing up an issue with the instructor directly, submit anonymous feedback or contact the Office of the Ombud. ",
    "url": "/dev-docs/_site/about/#inclusive-community",
    "relUrl": "/about/#inclusive-community"
  },"19": {
    "doc": "Acerca de",
    "title": "Acerca de",
    "content": " ",
    "url": "/dev-docs/_site/about/",
    "relUrl": "/about/"
  },"20": {
    "doc": "Cursos",
    "title": "Quality",
    "content": "Use the search bar to discover guidelines and examples. A computer language is not just a way of getting a computer to perform operations but rather […] a novel formal medium for expressing ideas about methodology. Thus, programs must be written for people to read, and only incidentally for machines to execute.1 . In this course, we will primarily study two measures of correctness as it relates to code quality. External correctness A program where the desired outcome is correctly produced by a computer. However, external correctness is not the only criteria for determining the quality of a program. There are numerous ways a software project can fail: projects can be over budget, they can ship late, they can fail to be useful, or they can simply not be useful enough. Evidence clearly shows that success is highly contextual and stakeholder-dependent: success might be financial, social, physical and even emotional, suggesting that software engineering success is a multifaceted variable that cannot explained simply by user satisfaction, profitability or meeting requirements, budgets and schedules.2 . Whereas [external correctness criteria] are concerned with how software behaves technically according to specifications, some qualities concern properties of how developers interact with code:2 . | Verifiability is the effort required to verify that software does what it is intended to do. For example, it is hard to verify a safety critical system without either proving it correct or testing it in a safety-critical context (which isn’t safe). Take driverless cars, for example: for Google to test their software, they’ve had to set up thousands of paid drivers to monitor and report problems on the road. In contrast, verifying that a simple static HTML web page works correctly is as simple as opening it in a browser. | Maintainability is the effort required to correct, adapt, or perfect software. This depends mostly on how comprehensible and modular an implementation is. | Reusability is the effort required to use a program’s components for purposes other than those for which it was originally designed. APIs are reusable by definition, whereas black box embedded software (like the software built into a car’s traction systems) is not. | . Together, we call these criteria for how developers interact with code, “internal correctness.” . Internal correctness A program where the desired outcome is easily understood by other human programmers. Writing high-quality programs takes deliberate practice, so these guidelines are not meant to be memorized at first. Instead, we’ll learn how to write high-quality programs through a process called code review, the practice of reviewing code with an eye towards code quality. | Harold Abelson, Gerald Jay Sussman, Julie Sussman. 1984. “Preface to the First Edition.” Structure and Interpretation of Computer Programs. https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-7.html#%_chap_Temp_4 &#8617; . | Amy J. Ko. 2020. “Quality.” Cooperative Software Development. https://faculty.washington.edu/ajko/books/cooperative-software-development/#/quality &#8617; &#8617;2 . | . ",
    "url": "/dev-docs/_site/front-end/#quality",
    "relUrl": "/front-end/#quality"
  },"21": {
    "doc": "Cursos",
    "title": "Cursos",
    "content": " ",
    "url": "/dev-docs/_site/front-end/",
    "relUrl": "/front-end/"
  },"22": {
    "doc": "CSE 143",
    "title": "Documentación DEV",
    "content": "Documentación de metodología de desarrollo . Read more… . ",
    "url": "/dev-docs/_site/#documentaci%C3%B3n-dev",
    "relUrl": "/#documentación-dev"
  },"23": {
    "doc": "CSE 143",
    "title": "CSE 143",
    "content": " ",
    "url": "/dev-docs/_site/",
    "relUrl": "/"
  },"24": {
    "doc": "Text and Typography",
    "title": "Titles",
    "content": ". ",
    "url": "/dev-docs/_site/letras/#titles",
    "relUrl": "/letras/#titles"
  },"25": {
    "doc": "Text and Typography",
    "title": "H1 - heading",
    "content": " ",
    "url": "/dev-docs/_site/letras/#h1---heading",
    "relUrl": "/letras/#h1---heading"
  },"26": {
    "doc": "Text and Typography",
    "title": "H2 - heading",
    "content": "H3 - heading . H4 - heading . ",
    "url": "/dev-docs/_site/letras/",
    "relUrl": "/letras/"
  },"27": {
    "doc": "Text and Typography",
    "title": "Paragraph",
    "content": "I wandered lonely as a cloud . That floats on high o’er vales and hills, . When all at once I saw a crowd, . A host, of golden daffodils; . Beside the lake, beneath the trees, . Fluttering and dancing in the breeze. ",
    "url": "/dev-docs/_site/letras/#paragraph",
    "relUrl": "/letras/#paragraph"
  },"28": {
    "doc": "Text and Typography",
    "title": "Lists",
    "content": "Ordered list . | Firstly | Secondly | Thirdly | . Unordered list . | Chapter . | Setcion . | Paragraph | . | . | . Task list . | TODO | Completed | Hold on | Defeat COVID-19 . | Vaccine production | Economic recovery | People smile again | . | . Description list . Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sun ",
    "url": "/dev-docs/_site/letras/#lists",
    "relUrl": "/letras/#lists"
  },"29": {
    "doc": "Text and Typography",
    "title": "Block Quote",
    "content": "This line to shows the Block Quote. ",
    "url": "/dev-docs/_site/letras/#block-quote",
    "relUrl": "/letras/#block-quote"
  },"30": {
    "doc": "Text and Typography",
    "title": "Tables",
    "content": "| Company | Contact | Country | . | Alfreds Futterkiste | Maria Anders | Germany | . | Island Trading | Helen Bennett | UK | . | Magazzini Alimentari Riuniti | Giovanni Rovelli | Italy | . ",
    "url": "/dev-docs/_site/letras/#tables",
    "relUrl": "/letras/#tables"
  },"31": {
    "doc": "Text and Typography",
    "title": "Links",
    "content": "http://127.0.0.1:4000 . ",
    "url": "/dev-docs/_site/letras/#links",
    "relUrl": "/letras/#links"
  },"32": {
    "doc": "Text and Typography",
    "title": "Footnote",
    "content": "Click the hook will locate the footnote1, and here is another footnote2. ",
    "url": "/dev-docs/_site/letras/#footnote",
    "relUrl": "/letras/#footnote"
  },"33": {
    "doc": "Text and Typography",
    "title": "Images",
    "content": ". | Default (with caption) | . Full screen width and center alignment . | Specify width | . 400px image width . | Left aligned | . | Float to left . “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” . | . | Float to right . “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” . | . ",
    "url": "/dev-docs/_site/letras/#images",
    "relUrl": "/letras/#images"
  },"34": {
    "doc": "Text and Typography",
    "title": "Mermaid SVG",
    "content": "gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1d . ",
    "url": "/dev-docs/_site/letras/#mermaid-svg",
    "relUrl": "/letras/#mermaid-svg"
  },"35": {
    "doc": "Text and Typography",
    "title": "Mathematics",
    "content": "The mathematics powered by MathJax: . \\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\] When \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are . \\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\] ",
    "url": "/dev-docs/_site/letras/#mathematics",
    "relUrl": "/letras/#mathematics"
  },"36": {
    "doc": "Text and Typography",
    "title": "Inline code",
    "content": "This is an example of Inline Code. ",
    "url": "/dev-docs/_site/letras/#inline-code",
    "relUrl": "/letras/#inline-code"
  },"37": {
    "doc": "Text and Typography",
    "title": "Code block",
    "content": "Common . This is a common code snippet, without syntax highlight and line number. Specific Languages . Console . $ env |grep SHELL SHELL=/usr/local/bin/bash PYENV_SHELL=bash . Ruby . def sum_eq_n?(arr, n) return true if arr.empty? &amp;&amp; n == 0 arr.product(arr).reject { |a,b| a == b }.any? { |a,b| a + b == n } end . Shell . if [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exit fi; . Liquid . {% if product.title contains 'Pack' %} This product's title contains the word Pack. {% endif %} . Java . private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { // Write out any hidden serialization magic s.defaultWriteObject(); for (E e: map.keySet()) s.writeObject(e); } . ",
    "url": "/dev-docs/_site/letras/#code-block",
    "relUrl": "/letras/#code-block"
  },"38": {
    "doc": "Text and Typography",
    "title": "Reverse Footnote",
    "content": ". | The footnote source &#8617; . | The 2nd footnote source &#8617; . | . ",
    "url": "/dev-docs/_site/letras/#reverse-footnote",
    "relUrl": "/letras/#reverse-footnote"
  },"39": {
    "doc": "Text and Typography",
    "title": "Text and Typography",
    "content": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography. ",
    "url": "/dev-docs/_site/letras/",
    "relUrl": "/letras/"
  },"40": {
    "doc": "Proyecto",
    "title": "Final Project",
    "content": "Create something you want to share.1 . ",
    "url": "/dev-docs/_site/project/#final-project",
    "relUrl": "/project/#final-project"
  },"41": {
    "doc": "Proyecto",
    "title": "Table of contents",
    "content": ". | Ideation | Proposal | Status report | Implementation . | User guide | Design document | Reflection | . | . The final project is your opportunity to create something new that you want to share with the rest of the world. The nature of your project is entirely up to you so long as it is sufficiently complex. All that we ask is that you build something of interest to you, that you solve an actual problem, that you impact campus, or that you change the world. Strive to create something that outlives this course. The final project must involve developing an algorithm that either responds to user input or answers a question given a dataset. The problem should be at least as complex as the individual take-home assessments. The project should be primarily implemented in Java (recommended), Dart, Python, Go, or any flavor of JavaScript. (Other languages are possible with additional approval.) You are welcome to utilize any infrastructure provided the staff can access any required software and hardware. That said, the staff is best able to support projects that run in an Ed Workspace and use the class’s standard web app framework. The final project is a collaborative activity: everyone is required to work in groups of either 2 or 3 students. You may not work alone. It is expected that every student contributes equally to the design and implementation of that group’s project. We expect each student to contribute about 18–24 hours of total labor towards the project since it represents 3 weeks of work in the course and replaces several class sessions. Although no more than three students may design and implement a given project, you are welcome to solicit advice from others so long as the final implementation represents your group’s own original work. ",
    "url": "/dev-docs/_site/project/#table-of-contents",
    "relUrl": "/project/#table-of-contents"
  },"42": {
    "doc": "Proyecto",
    "title": "Ideation",
    "content": "The ideation phase is your opportunity to bounce one or more ideas off of the staff and identify collaborators. There’s no formal submission required during ideation. | What idea(s) do you have for your project? | If you plan to collaborate with one or two other students, what are their names? | When can all of the collaborators meet? | . You might have multiple ideas in mind. TAs and potential collaborators can help you choose between different options. We want to build a pattern-matching chatbot web app. ",
    "url": "/dev-docs/_site/project/#ideation",
    "relUrl": "/project/#ideation"
  },"43": {
    "doc": "Proyecto",
    "title": "Proposal",
    "content": "The proposal is your opportunity to receive feedback and approval from the staff before you proceed to design. The staff will either approve your proposal or require modifications on your part for subsequent approval. Your proposal, even if approved, is not binding; you may alter your plan at any point, provided you obtain the staff’s approval for any modifications. | What is the working title for your project? | Pitch your project in one or two sentences. | Describe your project in one or more paragraphs. What will your software do? What features will it have? How will it be executed? | . FRANK: A frank chatbot. FRANK is a web app that accepts text input from the user, parses it to identify keywords and important phrases, and returns a coherent sentence that mentions the keywords and phrases in a natural way. In the world of software, most everything takes longer to implement than you expect. It’s not uncommon to accomplish less in a fixed amount of time than initially hoped. | Define a good outcome for your project. What functionality will you definitely accomplish? | Define a better outcome for your project. What do you think you can accomplish by the deadline? | Define a best outcome for your project. What do you hope to accomplish by the deadline? | . A good outcome would be a chatbot that forms coherent sentences by mentioning keywords and important phrases from the input text. A better outcome would be a chatbot that also models conversation history, including an option to start a new conversation by clearing the history. A best outcome would be a chatbot that can learn from successful past conversations: the chatbot stores the conversation history of each user that had a positive experience so that future conversations with new users can draw on keywords and themes that were helpful to other users. Finally, outline your next steps in one or more paragraphs. | What new skills will you need to acquire? | What topics will you need to research? | If working with one or two other students, who will do what? | . A pattern-matching chatbot will require more investigation into language modeling and syntax. There might be Java libraries on the internet that can tag parts of speech in a sentence to help the app identify keywords and important phrases. We can also draw inspiration from other programmers that have written about their experience creating chatbots. If you choose to do research, it’s important to consider how other programmers conceptualize the problem. In the chatbot example, our good outcome could be solved using string manipulations and dictionary lookups to identify parts of speech. If we model our project after examples that conceptualize the problem in a more complex way, it can be easy to get sidetracked and end up working on an approach that doesn’t address the original proposal! . ",
    "url": "/dev-docs/_site/project/#proposal",
    "relUrl": "/project/#proposal"
  },"44": {
    "doc": "Proyecto",
    "title": "Status report",
    "content": "The status report is your opportunity to keep yourself on track by meeting with a TA to discuss your project progress and adapt plans as necessary. The status report meeting will be most helpful if the project group has already made some progress into the project implementation. | What have you done for your project so far? | What have you not done for your project yet? | What problems, if any, have you encountered? | . ",
    "url": "/dev-docs/_site/project/#status-report",
    "relUrl": "/project/#status-report"
  },"45": {
    "doc": "Proyecto",
    "title": "Implementation",
    "content": "Create an Ed workspace to collaborate during the implementation of your project. Include any and all files required to run your software. Keep in mind our code quality guidelines when implementing your project. Source code should meet our code quality guidelines so that other programmers can understand it. If you incorporate code found online, cite the source with inline comments. In your selection of code sources, be reasonable. This project should be primarily original work. Note If your project is not compatible with Ed, you may submit a link to a public GitHub or GitLab repository. To run Java code in a workspace, you will need to use the terminal. For example, if we had a ChatBot class that includes a main method, we could run the following terminal command. (The rm command at the end removes the .class files generated by Java after the program is done running.) . javac ChatBot.java &amp;&amp; java ChatBot; rm *.class . If the ChatBot requires other Java libraries (jar files), include the -cp flag to tell Java where to find YOUR_JAR_FILES. javac -cp \".:YOUR_JAR_FILES\" ChatBot.java &amp;&amp; java -cp \".:YOUR_JAR_FILES\" ChatBot; rm *.class . In addition to the source code for running your project, include three additional text files. User guide . Write a user guide for your project in the form of a file called README.txt or README.md (if you prefer Markdown) at least several paragraphs in length. Though the structure of your user guide is entirely up to you, it should be clear to the staff how and where, if applicable, to compile, configure, and use your project. It should not be necessary for us to contact you with questions regarding your project after its submission. Hold our hand with this documentation: be sure to answer in your documentation any questions that you think we might have while testing your work. The guide should also include a link to a short video (no more than 5 minutes long) that presents your project to the world with slides, screenshots, voiceover, and/or live action. Your video should somehow include your project title, your names, and any other details that you’d like to convey to viewers. We recommend recording a video through Zoom for ease of screensharing and so that all collaborators can present. Design document . Include your project’s design document in the form of a file called DESIGN.txt or DESIGN.md at least several paragraphs in length. The design document discusses the project’s technical implementation details and reasoning behind design decisions. Reflection . In a file named reflection.txt, write a reflection answering the following questions (along with anything else you find appropriate) at least one paragraph in length. | What did you learn during this project? | What did you enjoy during this project? | What did you find challenging or frustrating during this project? | What did you find particularly helpful for your learning during this project? | . | CS50. 2020. Final Project. In CS50 Spring 2020. https://cs50.harvard.edu/college/2020/spring/project/ &#8617; . | . ",
    "url": "/dev-docs/_site/project/#implementation",
    "relUrl": "/project/#implementation"
  },"46": {
    "doc": "Proyecto",
    "title": "Proyecto",
    "content": " ",
    "url": "/dev-docs/_site/project/",
    "relUrl": "/project/"
  }
}
